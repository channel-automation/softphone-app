@{
    ViewBag.Title = "Home";
}
<div class="row mb-3 mt-3">
    <div class="col-lg-3 col-6">
        <div class="small-box bg-gradient-info">
            <div class="inner">
                <p>Total Calls</p>
                <h2 id="lblTotalCount">0</h2>
            </div>
            <div class="icon">
                <i class="fas fa-phone"></i>
            </div>
            <div class="small-box-footer text-sm" id="divTotalCountChanges">
                0% increased <i class="fas fa-arrow-up-wide-short"></i>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-gradient-purple">
            <div class="inner">
                <p>Inbound Calls</p>
                <h2 id ="lblInboundCount">0</h2>
            </div>
            <div class="icon">
                <i class="fas fa-headphones"></i>
            </div>
            <div class="small-box-footer text-sm" id="divInboundCountChanges">
                0% increased <i class="fas fa-arrow-up-wide-short"></i>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-gradient-success">
            <div class="inner">
                <p>Outbound Calls</p>
                <h2 id="lblOutboundCount">0</h2>
            </div>
            <div class="icon">
                <i class="fas fa-square-phone"></i>
            </div>
            <div class="small-box-footer text-sm" id="divOutboundCountChanges">
                0% increased <i class="fas fa-arrow-up-wide-short"></i>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-gradient-warning">
            <div class="inner">
                <p>Average Duration</p>
                <h2 id="lblAverageDuration">0.0</h2>
            </div>
            <div class="icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="small-box-footer text-sm" id="divAverageDurationChanges">
                0% increased <i class="fas fa-arrow-up-wide-short"></i>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-4">
        <div class="card card-purple card-outline">
            <div class="card-header">
                <div class="card-title">
                    <b>Call Status Distribution</b>
                    <br /><small>Current status breakdown</small>
                </div>
            </div>
            <div class="card-body">
                <canvas id="cnvDistribution" height="350"></canvas>
            </div>
        </div>
    </div>
    <div class="col-lg-8">
        <div class="card card-purple card-outline">
            <div class="card-header">
                <div class="card-title">
                    <b>Weekly Call Metrics</b>
                    <br /><small>(<span id="lblWeekChanges">0</span>%) than last week</small>
                </div>
            </div>
            <div class="card-body">
                <canvas id="cnvWeekly" height="160"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        $(function () {
             updateDashboard();
        });

        function updateDashboard() {
            seCountingCards();
            setDistributionChart();
            setWeklyChart();
            //Set auto-update timer for every 5 minutes
            setTimeout(updateDashboard, (1000 * 60 * 5));
        }

        function seCountingCards() {
            $.get("@Url.Action("CountingCardsData")", function (response) {
                $("#lblTotalCount").text(numeral(response.totalCountNow).format("0,0"));
                $("#lblInboundCount").text(numeral(response.inboundCountNow).format("0,0"));
                $("#lblOutboundCount").text(numeral(response.outboundCountNow).format("0,0"));
                $("#lblAverageDuration").text(numeral(response.averageDurationNow).format("0,0.0"));
                $("#divTotalCountChanges").html(`${numeral(response.totalCountChanges).format("0,0")}% increased <i class="fas fa-arrow-up-wide-short"></i>`);
                $("#divInboundCountChanges").html(`${numeral(response.inboundCountChanges).format("0,0")}% increased <i class="fas fa-arrow-up-wide-short"></i>`);
                $("#divOutboundCountChanges").html(`${numeral(response.outboundCountChanges).format("0,0")}% increased <i class="fas fa-arrow-up-wide-short"></i>`);
                let isNeg = response.averageDurationChanges < 0;
                $("#divAverageDurationChanges").html(`${numeral(response.averageDurationChanges).format("0,0")}% ${isNeg ? "decreased" : "increased"} <i class="fas fa-arrow-${isNeg ? "down" : "up"}-wide-short"></i>`);
            });
        }

        var distributionChart;
        function setDistributionChart() {
             $.get("@Url.Action("DistributionChartData")", function (response) {
                 if (distributionChart) {
                    distributionChart.data.labels = response.labels;
                    distributionChart.data.datasets[0].data = response.values;
                    distributionChart.data.datasets[0].backgroundColor = response.backgrounds;
                    distributionChart.data.datasets[0].borderColor = response.borders;
                    distributionChart.update();
                    return false;
                 }
                var ctx = document.getElementById("cnvDistribution").getContext("2d");
                distributionChart = new Chart(ctx, {
                    type: "pie",
                    data: {
                        labels: response.labels,
                        datasets: [{
                            data: response.values,
                            backgroundColor: response.backgrounds,
                            borderColor: response.borders,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            datalabels: {
                                color: "white",
                                font: { weight: "bold" },
                                formatter: (val) => `${val}%`
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
             });
        }

        var weeklyChart;
        function setWeklyChart() {
            $.get("@Url.Action("WeeklyChartData")", function (response) {
                $("#lblWeekChanges").text(numeral(response.weekChanges).format("+0,0"));
                if (weeklyChart) {
                    weeklyChart.data.labels = response.labels;
                    weeklyChart.data.datasets[0].data = response.inboundValues;
                    weeklyChart.data.datasets[1].data = response.outboundValues;
                    weeklyChart.update();
                    return false;
                 }
                var ctx = document.getElementById("cnvWeekly").getContext("2d");
                weeklyChart = new Chart(ctx, {
                    type: "bar",
                    data: {
                        labels: response.labels,
                        datasets: [
                            {
                                label: "Inbound",
                                data: response.inboundValues,
                                backgroundColor: "rgba(13, 71, 161, 0.8)",
                                borderColor: "rgba(13, 71, 161, 1)",
                                borderWidth: 1
                            },
                            {
                                label: "Outbound",
                                data: response.outboundValues,
                                backgroundColor: "rgba(33, 150, 243, 0.8)",
                                borderColor: "rgba(33, 150, 243, 1)",
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        scales: {
                            xAxes: [{
                                gridLines: {
                                    display: false,
                                    drawBorder: false
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    stepSize: 10,
                                    min: 0,
                                    max: 50
                                },
                                gridLines: {
                                    drawBorder: false,
                                }
                            }]
                        },
                        plugins: {
                            datalabels: {
                                color: "white",
                                font: { weight: "bold" },
                                formatter: (val) => val
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
            });
        }
    </script>
}


